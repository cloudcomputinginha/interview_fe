
// function GroupInterviewSessionContent({
// 	interviewCtx,
// 	sessionCtx,
// 	socketCtx,
// 	participantId,
// }: {
// 	interviewCtx: ReturnType<typeof useMultiSessionInterview>
// 	sessionCtx: ReturnType<typeof useInterviewMultiSession>
// 	socketCtx: ReturnType<typeof useInterviewMultiWebSocket>
// 	participantId: number
// }) {
// 	const { state } = sessionCtx
// 	const { isAnswering, handleStartAnswering, stopAnswering, isWsConnected } =
// 		useInterviewMultiRealtime()

// 	const serverQuestionIdx = state.currentIndex
// 	const serverFollowUpIdx =
// 		state.participantFIndex[participantId] < 0
// 			? -1
// 			: state.participantFIndex[participantId]
// 	const isCurrentParticipantActive = state.currentActivePid === participantId

// 	// 현재 질문 정보
// 	const currentQuestion = interviewCtx.session?.qaFlow?.[serverQuestionIdx]
// 	const isFollowUp = serverFollowUpIdx !== -1
// 	const currentQuestionText = isFollowUp
// 		? currentQuestion?.followUps?.[serverFollowUpIdx]?.question
// 		: currentQuestion?.question

// 	// 질문 번호 표시
// 	const questionNumber = isFollowUp
// 		? `${serverQuestionIdx + 1}-${serverFollowUpIdx + 1}`
// 		: `${serverQuestionIdx + 1}`

// 	// 오디오 재생 관련
// 	const currentAudioPath = `${serverQuestionIdx}_${serverFollowUpIdx}`
// 	const audioUrl = currentAudioPath
// 		? interviewCtx.audioUrlMap[currentAudioPath]
// 		: null
// 	const [isAudioPlaying, setIsAudioPlaying] = useState(false)
// 	const [audioRef, setAudioRef] = useState<HTMLAudioElement | null>(null)

// 	// 오디오 재생 처리
// 	useEffect(() => {
// 		if (audioUrl && isCurrentParticipantActive) {
// 			if (audioRef) {
// 				audioRef.pause()
// 				audioRef.currentTime = 0
// 			}
// 			const newAudio = new window.Audio(audioUrl)
// 			newAudio.onended = () => setIsAudioPlaying(false)
// 			newAudio.onplay = () => setIsAudioPlaying(true)
// 			newAudio.onpause = () => setIsAudioPlaying(false)
// 			setAudioRef(newAudio)
// 		}
// 		return () => {
// 			if (audioRef) {
// 				audioRef.pause()
// 				audioRef.currentTime = 0
// 			}
// 		}
// 	}, [audioUrl, isCurrentParticipantActive])

// 	const playAudio = () => {
// 		if (audioRef && !isAudioPlaying) {
// 			audioRef.play().catch(e => console.error('오디오 재생 에러:', e))
// 		}
// 	}

// 	const pauseAudio = () => {
// 		if (audioRef && isAudioPlaying) {
// 			audioRef.pause()
// 		}
// 	}

// 	// 답변 제출 처리
// 	const handleSubmit = async () => {
// 		if (!isCurrentParticipantActive) return

// 		const answer = '음성 답변'

// 		console.log('답변 제출 전 상태:', {
// 			서버_질문_인덱스: serverQuestionIdx,
// 			서버_꼬리질문_인덱스: serverFollowUpIdx,
// 			전체_참가자_꼬리질문_상태: state.participantFIndex,
// 		})

// 		try {
// 			if (serverFollowUpIdx === -1) {
// 				await interviewCtx.handleMultiSessionMainAnswerSubmit(answer)
// 			} else {
// 				await interviewCtx.handleMultiSessionFollowUpAnswerSubmit(answer)
// 			}

// 			console.log('답변 제출 완료, advance 전송')
// 			socketCtx.sendControl({ type: 'advance' })
// 		} catch (error) {
// 			console.error('답변 제출 실패:', error)
// 		}
// 	}

// 	// 디버깅 정보
// 	useEffect(() => {
// 		console.log('현재 상태:', {
// 			서버_질문_인덱스: serverQuestionIdx,
// 			서버_꼬리질문_인덱스: serverFollowUpIdx,
// 			활성_참가자: state.currentActivePid,
// 			현재_참가자_활성: isCurrentParticipantActive,
// 			질문_텍스트: currentQuestionText?.substring(0, 50) + '...',
// 			꼬리질문_여부: isFollowUp,
// 			전체_참가자_꼬리질문_상태: state.participantFIndex,
// 			현재_참가자_ID: participantId,
// 		})
// 	}, [
// 		serverQuestionIdx,
// 		serverFollowUpIdx,
// 		state.currentActivePid,
// 		isCurrentParticipantActive,
// 		currentQuestionText,
// 		isFollowUp,
// 		state.participantFIndex,
// 		participantId,
// 	])

// 	return (
// 		<div className="min-h-screen bg-gray-900 text-white flex flex-col">
// 			{/* Header */}
// 			<div className="p-4 border-b border-gray-800 flex justify-between items-center">
// 				<div className="flex items-center">
// 					<div className="w-8 h-8 rounded-full bg-[#8FD694] flex items-center justify-center mr-2">
// 						<span className="text-white font-bold">In</span>
// 					</div>
// 					<span className="font-bold">job</span>
// 				</div>
// 				<div className="text-center">
// 					<span className="text-sm text-gray-400">멀티 세션 면접 진행 중</span>
// 				</div>
// 				<Button
// 					variant="ghost"
// 					size="sm"
// 					className="text-red-400 hover:text-red-300 hover:bg-red-900/20"
// 					onClick={() => {
// 						if (confirm('면접을 종료하시겠습니까?')) {
// 							window.location.href = '/workspace'
// 						}
// 					}}
// 				>
// 					<X className="h-5 w-5 mr-1" /> 종료
// 				</Button>
// 			</div>

// 			<div className="flex-1 flex flex-col md:flex-row">
// 				{/* Main Content */}
// 				<div className="flex-1 p-4 flex flex-col">
// 					{/* Question Display */}
// 					<AnimatePresence mode="wait">
// 						<motion.div
// 							key={questionNumber + currentQuestionText}
// 							initial={{ opacity: 0, y: 20 }}
// 							animate={{ opacity: 1, y: 0 }}
// 							exit={{ opacity: 0, y: -20 }}
// 							transition={{ duration: 0.3 }}
// 							className="bg-gray-800 p-4 rounded-lg mb-4 min-h-[120px] flex flex-col justify-center"
// 						>
// 							{interviewCtx.isQuestionLoading ? (
// 								<div className="flex items-center justify-center h-24">
// 									<div className="text-sm text-gray-400 mr-2">
// 										질문을 생성하고 있습니다...
// 									</div>
// 									<Loader2 className="animate-spin w-8 h-8 text-[#8FD694]" />
// 								</div>
// 							) : interviewCtx.isAudioPreloading ? (
// 								<div className="flex items-center justify-center h-24">
// 									<div className="text-sm text-gray-400 mr-2">
// 										오디오를 로드하고 있습니다...
// 									</div>
// 									<Loader2 className="animate-spin w-8 h-8 text-[#8FD694]" />
// 								</div>
// 							) : (
// 								<>
// 									<div className="flex items-center justify-between mb-2">
// 										<span className="text-sm text-gray-400">
// 											질문 {questionNumber}/
// 											{interviewCtx.session?.qaFlow?.length || 0}
// 										</span>
// 										{isCurrentParticipantActive && audioUrl && (
// 											<Button
// 												size="sm"
// 												variant="ghost"
// 												onClick={isAudioPlaying ? pauseAudio : playAudio}
// 												className="text-[#8FD694] hover:text-[#7ac47f]"
// 											>
// 												{isAudioPlaying ? (
// 													<Pause className="h-4 w-4" />
// 												) : (
// 													<Play className="h-4 w-4" />
// 												)}
// 											</Button>
// 										)}
// 									</div>
// 									<p className="text-lg font-medium">{currentQuestionText}</p>
// 									{isFollowUp && (
// 										<div className="mt-2 text-sm text-gray-400">
// 											꼬리질문 {serverFollowUpIdx + 1}
// 										</div>
// 									)}
// 								</>
// 							)}
// 						</motion.div>
// 					</AnimatePresence>

// 					{/* Session Info */}
// 					<div className="bg-gray-800 p-4 rounded-lg mb-4">
// 						<div className="flex justify-between items-center mb-2">
// 							<span className="text-sm text-gray-400">진행 상황</span>
// 							<span className="text-sm font-medium">
// 								질문 {serverQuestionIdx + 1}/
// 								{interviewCtx.session?.qaFlow?.length || 0}
// 							</span>
// 						</div>
// 						<Progress
// 							value={
// 								((serverQuestionIdx + 1) /
// 									(interviewCtx.session?.qaFlow?.length || 1)) *
// 								100
// 							}
// 							className="h-2 bg-gray-700"
// 						/>
// 					</div>

// 					{/* Participants */}
// 					<div className="bg-gray-800 p-4 rounded-lg mb-4">
// 						<h3 className="text-lg font-semibold mb-3">참가자</h3>
// 						<div className="grid grid-cols-1 md:grid-cols-3 gap-3">
// 							{state.participants.map(participant => (
// 								<motion.div
// 									key={participant.id}
// 									className={`p-3 rounded-lg border ${participant.isActive
// 											? 'border-[#8FD694] bg-[#8FD694]/10'
// 											: 'border-gray-600 bg-gray-700'
// 										}`}
// 									whileHover={{ scale: 1.02 }}
// 									transition={{ duration: 0.2 }}
// 								>
// 									<div className="flex items-center justify-between">
// 										<div className="flex items-center">
// 											<User className="h-4 w-4 mr-2" />
// 											<span className="text-sm font-medium">
// 												{participant.name}
// 											</span>
// 										</div>
// 										<div className="flex items-center space-x-2">
// 											{participant.isActive && (
// 												<div className="w-2 h-2 rounded-full bg-[#8FD694] animate-pulse" />
// 											)}
// 											{participant.isMuted ? (
// 												<MicOff className="h-4 w-4 text-red-400" />
// 											) : (
// 												<Mic className="h-4 w-4 text-[#8FD694]" />
// 											)}
// 										</div>
// 									</div>
// 									{participant.isActive && (
// 										<div className="mt-2 text-xs text-gray-400">
// 											{serverFollowUpIdx === -1
// 												? '메인 질문'
// 												: `꼬리질문 ${serverFollowUpIdx + 1}`}
// 										</div>
// 									)}
// 								</motion.div>
// 							))}
// 						</div>
// 					</div>

// 					{/* Current Status */}
// 					<div className="bg-gray-800 p-4 rounded-lg">
// 						<div className="flex items-center justify-between mb-3">
// 							<h3 className="text-lg font-semibold">현재 상태</h3>
// 							<div className="flex items-center space-x-2">
// 								{isWsConnected ? (
// 									<div className="w-2 h-2 rounded-full bg-[#8FD694]" />
// 								) : (
// 									<div className="w-2 h-2 rounded-full bg-red-400" />
// 								)}
// 								<span className="text-xs text-gray-400">
// 									{isWsConnected ? '연결됨' : '연결 끊김'}
// 								</span>
// 							</div>
// 						</div>
// 						<div className="space-y-2 text-sm">
// 							<div>활성 참가자: {state.currentActivePid || '없음'}</div>
// 							<div>현재 질문: {serverQuestionIdx + 1}</div>
// 							<div>내 순서: {isCurrentParticipantActive ? '활성' : '대기'}</div>
// 							{isCurrentParticipantActive && (
// 								<div>
// 									내 단계:{' '}
// 									{serverFollowUpIdx === -1
// 										? '메인 질문'
// 										: `꼬리질문 ${serverFollowUpIdx + 1}`}
// 								</div>
// 							)}
// 						</div>
// 					</div>
// 				</div>

// 				{/* Sidebar */}
// 				<div className="w-full md:w-80 bg-gray-800 p-4 flex flex-col">
// 					{/* Controls */}
// 					<div className="mb-6">
// 						<h3 className="text-lg font-semibold mb-3">제어</h3>
// 						<div className="space-y-2">
// 							<Button
// 								className="w-full bg-[#8FD694] hover:bg-[#7ac47f] text-white"
// 								onClick={() => socketCtx.sendControl({ type: 'advance' })}
// 								disabled={!isCurrentParticipantActive}
// 							>
// 								<ChevronRight className="h-4 w-4 mr-2" />
// 								다음 턴
// 							</Button>
// 						</div>
// 					</div>

// 					{/* Voice Controls */}
// 					<div className="mb-6">
// 						<h3 className="text-lg font-semibold mb-3">음성 제어</h3>
// 						{!isAnswering ? (
// 							<Button
// 								className={`w-full text-white ${isWsConnected && isCurrentParticipantActive
// 										? 'bg-[#8FD694] hover:bg-[#7ac47f]'
// 										: 'bg-gray-500 cursor-not-allowed'
// 									}`}
// 								disabled={!isWsConnected || !isCurrentParticipantActive}
// 								onClick={handleStartAnswering}
// 							>
// 								{isCurrentParticipantActive ? '답변 시작' : '대기 중'}
// 							</Button>
// 						) : (
// 							<Button
// 								className="w-full bg-red-600 hover:bg-red-700 text-white"
// 								onClick={stopAnswering}
// 							>
// 								답변 중지
// 							</Button>
// 						)}
// 					</div>

// 					{/* Answer Submit */}
// 					{isCurrentParticipantActive && (
// 						<div className="mb-6">
// 							<h3 className="text-lg font-semibold mb-3">답변 제출</h3>
// 							<Button
// 								className="w-full bg-blue-600 hover:bg-blue-700 text-white"
// 								onClick={handleSubmit}
// 								disabled={
// 									interviewCtx.isQuestionLoading ||
// 									interviewCtx.isFeedbackLoading
// 								}
// 							>
// 								{interviewCtx.isQuestionLoading ||
// 									interviewCtx.isFeedbackLoading ? (
// 									<Loader2 className="animate-spin w-4 h-4 mr-2" />
// 								) : null}
// 								답변 제출
// 							</Button>
// 						</div>
// 					)}

// 					{/* Status */}
// 					<div className="bg-gray-700 rounded-lg p-4 mb-6">
// 						{!isAnswering ? (
// 							<div className="flex items-center">
// 								<AlertCircle className="h-5 w-5 text-[#8FD694] mr-2" />
// 								<p className="text-sm">
// 									{isCurrentParticipantActive
// 										? '준비가 되면 "답변 시작" 버튼을 클릭하세요.'
// 										: '다른 참가자의 차례입니다.'}
// 								</p>
// 							</div>
// 						) : (
// 							<div className="flex items-center">
// 								<div className="w-2 h-2 rounded-full bg-[#8FD694] mr-2 animate-pulse" />
// 								<p className="text-sm">
// 									답변 중입니다. 마이크가 켜져 있는지 확인하세요.
// 								</p>
// 							</div>
// 						)}
// 					</div>

// 					{/* Connection Status */}
// 					{!isWsConnected && (
// 						<div className="bg-yellow-900/20 border border-yellow-600 rounded-lg p-3 mb-4">
// 							<div className="flex items-center">
// 								<AlertCircle className="h-5 w-5 text-yellow-400 mr-2" />
// 								<div className="text-sm">
// 									<div className="font-medium text-yellow-400">연결 끊김</div>
// 									<div className="text-yellow-300 text-xs">
// 										WebSocket 연결이 끊어졌습니다.
// 									</div>
// 								</div>
// 							</div>
// 						</div>
// 					)}
// 				</div>
// 			</div>

// 			{/* Bottom Controls */}
// 			<div className="p-4 border-t border-gray-800 flex justify-center">
// 				<div className="flex space-x-4">
// 					<Button
// 						variant="destructive"
// 						size="icon"
// 						className="rounded-full w-12 h-12"
// 						onClick={() => {
// 							if (confirm('면접을 종료하시겠습니까?')) {
// 								window.location.href = '/workspace'
// 							}
// 						}}
// 					>
// 						<X className="h-5 w-5" />
// 					</Button>
// 				</div>
// 			</div>
// 		</div>
// 	)
// }


<div className="grid grid-cols-2 gap-4 text-sm mb-4">
							<div>
								<span className="font-medium">인터뷰 ID:</span>{' '}
								{interviewId}
							</div>
							<div>
								<span className="font-medium">내 참가자 ID:</span>{' '}
								{myMemberInterviewId}
							</div>
							<div>
								<span className="font-medium">내 세션 ID:</span> {sessionId}
							</div>
							<div>
								<span className="font-medium">활성 참가자:</span>{' '}
								{team?.activePid || '없음'}
							</div>
							<div>
								<span className="font-medium">현재 질문 인덱스:</span>{' '}
								{team?.index ?? '-'}
							</div>
							<div>
								<span className="font-medium">현재 F 인덱스:</span>{' '}
								{team?.fIndexCurrent ?? '-'}
							</div>
							<h3 className="text-lg font-semibold mb-3">인터뷰 컨트롤</h3>
							<InterviewControls
								sessionId={sessionsMap[String(team?.activePid ?? '')] ?? ''}
								activeMemberId={team?.activePid}
								myMemberId={String(myMemberInterviewId)}
								team={team ?? null}
								onAdvance={advance}
							/>
							<InterviewStatusBar
								pollingStatus={status}
								socketStatus={socketStatus}
								isMyTurn={amActive}
							/>
						</div>